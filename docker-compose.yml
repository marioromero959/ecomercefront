version: '3.8'

services:
  # Base de datos PostgreSQL
  database:
    image: postgres:15-alpine
    container_name: ecommerce_postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres123
      - POSTGRES_DB=ecommerce_db
      - PGUSER=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database:/docker-entrypoint-initdb.d
    command: postgres -c 'max_connections=50'
    networks:
      - ecommerce_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Backend API Node.js
  backend:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: ecommerce_backend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DB_HOST=database
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres123
      - DB_NAME=ecommerce_db
      - JWT_SECRET=ecommerce_jwt_secret_key_2024_very_secure_random_string_12345
      - JWT_EXPIRES_IN=7d
      - UPLOAD_DIR=./uploads
      - MAX_FILE_SIZE=5242880
      - CORS_ORIGIN=http://localhost:4200,http://localhost:80
    volumes:
      - backend_uploads:/app/uploads
    depends_on:
      database:
        condition: service_healthy
    networks:
      - ecommerce_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend Angular
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ecommerce_frontend
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./src:/app/src
      - /app/node_modules
    environment:
      - NODE_ENV=development
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - ecommerce_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  backend_uploads:
    driver: local

networks:
  ecommerce_network:
    driver: bridge